/**
 * @file TPGenerator.h
 * @author Spencer Millican (millican@auburn.edu)
 * @version 0.1
 * @date 2019-02-22
 *
 * @copyright Copyright (c) 2019
 *
 */


#ifndef TPGenerator_h
#define TPGenerator_h

#include <unordered_set>

#include "Circuit.h"
#include "tpi/Testpoint.hpp"

/*
 * Create all TPs for a circuit.
 *
 * @param _TPType The type of TPs to generate.
 * @param _nodeType The type of nodes which may be generated by the TPs given.
 * @param _lineType The type of nodes which may be generated by the TPs given.
 * @param _valueType The type of value to be simulated. Example: Value/FaultyValue
 */
template <class _TPType, class _nodeType, class _lineType, class _valueType>
class TPGenerator {
public:
	/*
	 * Create all TPs for the given circuit.
	 *
	 * @param _circuit The circuit to generate all TPs for.
	 * @return The set of all testpoints.
	 */
	static std::set<Testpoint<_nodeType, _lineType, _valueType>*> allTPs(Circuit* _circuit) {
		std::set<_TPType> toReturn;
		for (Levelized* node : _circuit->nodes()) {
			if (node->inputs().size() == 0)//no tp on PI
			{
				continue;
			}
			_nodeType* cast = dynamic_cast<_nodeType*>(node);
			std::set<_TPType> toAdd = allTPs(cast);
			toReturn.insert(toAdd.begin(), toAdd.end());
		}
		//Convert to pointers (previously non-pointers to allow for easy indentical TP removeal).
		std::set<Testpoint<_nodeType, _lineType, _valueType>*> pointers;
		for (_TPType TP : toReturn) {
			pointers.emplace(new _TPType(TP));
		}
		return pointers;
	}

private:
	/*
	 * Create all TPs for a given node (input and output TPs).
	 *
	 * @param _node The node to make all TPs for.
	 * @return The list of TPs.
	 */
	static std::set<_TPType> allTPs(_nodeType* _node) {
		std::set<_TPType> toReturn;
		for (Connecting* input : _node->inputs()) {
			_lineType* line = dynamic_cast<_lineType*>(input);
			std::set<_TPType> toAdd = allTPs(line);
			toReturn.insert(toAdd.begin(), toAdd.end());
		}
		for (Connecting* output : _node->outputs()) {
			_lineType* line = dynamic_cast<_lineType*>(output);
			std::set<_TPType> toAdd = allTPs(line);
			toReturn.insert(toAdd.begin(), toAdd.end());
		}
		return toReturn;
	}

	/*
	 * Create all TPs for a given line.
	 *
	 * This function must be specialized for each TP type. See the CPP file.
	 *
	 * @param _line The line to make all TPs for.
	 * @return All TPs on the given line.
	 */
	static std::set<_TPType> allTPs(_lineType* _line) {
		std::set<_TPType> toReturn;
		_valueType curValue(0);
		do {
			toReturn.emplace(_TPType(_line, curValue));
		} while (curValue.increment() == false);
		return toReturn;
	}
};


#endif